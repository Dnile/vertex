package java

var tpl = `
//////////////////////////////////////////////////////////////////////////////////////
//
//                  * * * CAUTION: HERE BE GENEREATED DRAGONS * * *
//
//           THIS FILE IS AUTO-GENERATED BY VERTEX. DO NOT EDIT IT MANUALLY
//
//////////////////////////////////////////////////////////////////////////////////////

package {{ .Package }};

import java.util.HashMap;
import java.util.Map;

import everything.me.vertex.BaseAPI;
import everything.me.vertex.Client;
import everything.me.vertex.Decoder;
import everything.me.vertex.Request;
import everything.me.vertex.concurrent.CompletableFuture;

/** 
* Autogenerated Class {{.Name}}
*
* {{.Doc}}
*/
public class {{.Name}} extends BaseAPI {

    static final public String ROOT = "{{.Root}}";
    {{ range .Globals }}
    // NOTE: Global Parameter {{ .Name }} ({{.Doc}}) Requires Injection
    {{ end }}
    
    public static class Types {
        {{ range .Types }}
        public static class {{ .Name }}{{if .Extends}} extends {{ .Extends }} {} {{else}} {
        {{ range .Members }}\
        public {{ .Type }} {{ .Name }};
        {{ end }}
        } {{end}}
        {{ end }}
    }
    
    
    public {{ .Name }}(boolean secure, String host, Decoder decoder, Client client) {
        super(secure, host, "{{ .Root }}", decoder, client);
    }


    
{{ range .Methods }}
    /**
    * Method {{ .Name }}
    *
    * {{ .Doc  }}
    *{{if .Params }}\
    {{ range .Params }}
    * @param {{ .Name }} {{ .Doc }}\
    {{ end }}{{end}}
    **/{{ template "decorators" . }}\
    public CompletableFuture<{{ .Returns }}> {{ .Name }}({{ renderArguments .Params }}) {
        {{ template "buildMaps" . }}\
        return perform(Request.Method.{{ .HttpVerb }}, "{{.Path}}",
                       params,
                       pathParams,
                       parser({{ .Returns }}.class));
    }

{{ end }}
}
{{ define "decorators" }}
{{ range .Params }}\
{{ if eq .In "header" }}\
    @RequiredHeader("{{.Name}}")
{{ else if .Global }}\
    @GlobalParam("{{.Name}}")
{{end}}\
{{ end }}\
{{ end }}\

{{ define "buildMaps" }}
        Map<String,Object> pathParams = new HashMap<>();
        Request.ParamMap params = new Request.ParamMap();\
{{ range .Params }}{{ if eq .In "query" "body" "header" }}
        params.set("{{.Name}}", {{.Name}});
{{ else if eq .In "path" }}\
        pathParams.put("{{.Name}}", {{.Name}});{{end}}
{{ end}}\
{{ end }}
`
